{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Paleo","text":"<p>Tools for interacting with edit histories in the Connectome Annotation and Versioning Engine (CAVE).</p>"},{"location":"install/","title":"Installation","text":"<p>To install <code>paleo</code>, run:</p> <pre><code>pip install paleo\n</code></pre>"},{"location":"map/","title":"Layout","text":"<p>The diagram below describes some of the current functions in the <code>paleo</code> library, and how they interact with each other. Note that you can click on anything underlined to be taken to the corresponding reference documentation. The diagram is a work in progress and will be updated as the library evolves.</p> <pre><code>---\nconfig:\n  layout: elk\n  &lt;!-- look: handDrawn --&gt;\n  theme: neutral\n---\ngraph TD;\n    get_root_level2_edits[/\"`_get_root_level2_edits_`\"/]\n    get_operations_level2_edits[/\"`_get_operations_level2_edits_`\"/]\n    get_metaedits[/\"`_get_metaedits_`\"/]\n    apply_edit[/\"`_apply_edit_`\"/]\n    get_initial_graph[/\"`_get_initial_graph_`\"/]\n    resolve_edit[/\"`_resolve_edit_`\"/]\n    get_nucleus_supervoxel[/\"`_get_nucleus_supervoxel_`\"/]\n    get_mutable_synapses[/\"`_get_mutable_synapses_`\"/]\n    get_used_node_ids[/\"`_get_used_node_ids_`\"/]\n    get_node_aliases[/\"`_get_node_aliases_`\"/]\n    get_level2_data_table[/\"`_level2_data_table_`\"/]\n    apply_edit_sequence[/\"`_apply_edit_sequence_`\"/]\n    skeletonize_sequence[/\"`_skeletonize_sequence_`\"/]\n    map_synapses_to_sequence[/\"`_map_synapses_to_sequence_`\"/]\n    append1[/\"`_append_`\"/]\n    ???1[/\"`_???_`\"/]\n    ???2[/\"`_???_`\"/]\n\n    click get_root_level2_edits \"../reference/#paleo.get_root_level2_edits\"\n    click get_operations_level2_edits \"../reference/#paleo.get_operations_level2_edits\"\n    click get_metaedits \"../reference/#paleo.get_metaedits\"\n    click apply_edit \"../reference/#paleo.apply_edit\"\n    click get_initial_graph \"../reference/#paleo.get_initial_graph\"\n    click resolve_edit \"../reference/#paleo.resolve_edit\"\n    click get_nucleus_supervoxel \"../reference/#paleo.get_nucleus_supervoxel\"\n    click get_mutable_synapses \"../reference/#paleo.get_mutable_synapses\"\n    click map_synapses_to_sequence \"../reference/#paleo.map_synapses_to_sequence\"\n    click get_used_node_ids \"../reference/#paleo.get_used_node_ids\"\n    click get_node_aliases \"../reference/#paleo.get_node_aliases\"\n    click get_level2_data_table \"https://caveconnectome.github.io/CAVEclient/api/l2cache/#caveclient.l2cache.L2CacheClient.get_l2data_table\"\n    click apply_edit_sequence \"../reference/#paleo.apply_edit_sequence\"\n    click skeletonize_sequence \"../reference/#paleo.skeletonize_sequence\"\n\n    RootID--&gt;get_root_level2_edits;\n    get_root_level2_edits--&gt;Deltas;\n\n    OperationIDs--&gt;get_operations_level2_edits;\n    get_operations_level2_edits--&gt;Deltas;\n\n    Deltas--&gt;get_metaedits;\n    get_metaedits--&gt;Metadeltas;\n\n    RootID--&gt;get_initial_graph;\n    get_initial_graph--&gt;InitialGraph\n\n    Deltas--&gt;AnyDelta{OR};\n    Metadeltas--&gt;AnyDelta{OR};\n    AnyDelta--&gt;apply_edit;\n\n    get_nucleus_supervoxel--&gt;NucleusSupervoxel;\n\n    RootID--&gt;get_node_aliases;\n    NucleusSupervoxel--&gt;get_node_aliases;\n    get_node_aliases--&gt;NucleusIDsOverTime;\n\n    InitialGraph--&gt;apply_edit\n\n    NucleusIDsOverTime--&gt;resolve_edit;\n\n    RootID--&gt;get_mutable_synapses;\n    AnyDelta--&gt;get_mutable_synapses;\n    get_mutable_synapses--&gt;SynapseTable;\n\n    InitialGraph--&gt;get_used_node_ids;\n    AnyDelta--&gt;get_used_node_ids;\n    get_used_node_ids--&gt;UsedNodes;\n    UsedNodes--&gt;get_level2_data_table;\n    get_level2_data_table--&gt;Level2DataTable;\n\n    subgraph Repeat\n        apply_edit_sequence[/\"`_apply_edit_sequence_`\"/]\n\n        apply_edit--&gt;UnresolvedGraph;\n        UnresolvedGraph--&gt;resolve_edit;\n        resolve_edit--&gt;ResolvedGraph;\n    end\n\n    ResolvedGraph--&gt;append1;\n    append1--&gt;GraphsByState;\n\n    GraphsByState--&gt;skeletonize_sequence;\n    Level2DataTable--&gt;skeletonize_sequence;\n    skeletonize_sequence--&gt;SkeletonsByState;\n\n    GraphsByState--&gt;map_synapses_to_sequence;\n    SynapseTable--&gt;map_synapses_to_sequence;\n    map_synapses_to_sequence--&gt;SynapseIDsByState;\n\n    SkeletonsByState--&gt;???1;\n    SynapseIDsByState--&gt;???2;</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#paleo","title":"<code>paleo</code>","text":"<p>Modules:</p> Name Description <code>graph_edits</code> <code>level2_graph</code> <code>networkdelta</code> <code>replay</code> <code>skeletons</code> <code>synapses</code> <code>utils</code> <p>Classes:</p> Name Description <code>NetworkDelta</code> <p>Functions:</p> Name Description <code>compare_graphs</code> <p>Compare two graphs and return the differences.</p> <code>get_detailed_change_log</code> <p>Get a detailed change log for a root ID.</p> <code>get_metadata_table</code> <p>Retrieve metadata for a list of operations or root IDs.</p> <code>get_metaedits</code> <p>Combine edits into meta-edits based on shared nodes.</p> <code>get_operation_level2_edit</code> <p>Extract changes to the level2 graph for a specific operation.</p> <code>get_operations_level2_edits</code> <p>Extract changes to the level2 graph for a list of operations.</p> <code>get_root_level2_edits</code> <p>Extract changes to the level2 graph for all operations on a root.</p> <code>get_initial_graph</code> <p>Get the initial graph for a given <code>root_id</code>, including objects that could become</p> <code>get_node_aliases</code> <p>For a given supervoxel, get the node that it was part of at <code>stop_layer</code> for</p> <code>get_component_masks</code> <p>From a list of components, get a node by component boolean DataFrame of masks.</p> <code>get_nucleus_supervoxel</code> <p>Get the supervoxel corresponding to the nucleus of a neuron by looking it up</p> <code>get_nodes_aliases</code> <p>For a list of supervoxels, get all of the nodes at <code>stop_layer</code> that they were</p> <code>get_supervoxel_mappings</code> <p>For a set of supervoxels and edits, get a mapping between the supervoxels and</p> <code>get_changed_nodes</code> <p>From a set of edits, get the nodes that have changed (added or removed).</p> <code>get_used_node_ids</code> <p>Starting from an initial graph and a series of edits, get the nodes that are</p> <code>apply_edit</code> <p>Apply the edit described by the networkdelta to the graph.</p> <code>resolve_edit</code> <p>Apply the edit described by the networkdelta and return the connected component</p> <code>find_anchor_node</code> <p>Find the first anchor node that is in the graph.</p> <code>apply_edit_sequence</code> <p>Apply a sequence of edits to the graph in order, storing information about</p> <code>get_mutable_synapses</code> <p>Get all synapses that could have been part of this <code>root_id</code> across all states.</p> <code>map_synapses_to_sequence</code> <p>Map synapses (with level2 node information) to a sequence of level2 nodes/graphs.</p> <code>skeletonize_sequence</code> <p>Generate skeletons for a sequence of graphs.</p> <code>compare_skeletons</code> <p>Compare two skeletons, finding the network changes between them.</p> <code>check_skeleton_changes</code> <p>Check if each skeleton in a sequence is different,</p>"},{"location":"reference/#paleo.NetworkDelta","title":"<code>NetworkDelta(removed_nodes, added_nodes, removed_edges, added_edges, metadata={})</code>","text":"<p>A class to represent a change to a network.</p> <p>Parameters:</p> Name Type Description Default <code>removed_nodes</code> <code>ndarray</code> <p>IDs of nodes that were removed by this operation.</p> required <code>added_nodes</code> <code>ndarray</code> <p>IDs of nodes that were added by this operation.</p> required <code>removed_edges</code> <code>ndarray</code> <p>Edges that were removed by this operation.</p> required <code>added_edges</code> <code>ndarray</code> <p>Edges that were added by this operation.</p> required <code>metadata</code> <code>dict</code> <p>A dictionary of arbitrary metadata about the operation.</p> <code>{}</code>"},{"location":"reference/#paleo.compare_graphs","title":"<code>compare_graphs(graph_before, graph_after, metadata=False)</code>","text":"<p>Compare two graphs and return the differences.</p> <p>Parameters:</p> Name Type Description Default <code>graph_before</code> <code>Graph</code> <p>The graph before the operation. Can either be a tuple of (nodes, edges) stored as <code>np.ndarrays</code>, or just the edges as an <code>np.ndarray</code>.</p> required <code>graph_after</code> <code>Graph</code> <p>The graph after the operation. Can either be a tuple of (nodes, edges) stored as <code>np.ndarrays</code>, or just the edges as an <code>np.ndarray</code>.</p> required <p>Returns:</p> Type Description <code>NetworkDelta</code> <p>The differences between the two graphs.</p>"},{"location":"reference/#paleo.get_detailed_change_log","title":"<code>get_detailed_change_log(root_id, client, filtered=True)</code>","text":"<p>Get a detailed change log for a root ID.</p> <p>Parameters:</p> Name Type Description Default <code>root_id</code> <code>int</code> <p>The root ID to get the change log for.</p> required <code>client</code> <code>CAVEclient</code> <p>The CAVEclient instance to use.</p> required <code>filtered</code> <code>bool</code> <p>Whether to filter the change log to only include changes which affect the final state of the root ID.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A detailed change log for the root ID.</p>"},{"location":"reference/#paleo.get_metadata_table","title":"<code>get_metadata_table(operation_ids=None, root_ids=None, client=None)</code>","text":"<p>Retrieve metadata for a list of operations or root IDs.</p> <p>NOTE: aspirational, not yet implemented. To make this efficient, would probably need a server-side implementation</p> <p>Parameters:</p> Name Type Description Default <code>operation_ids</code> <code>list of int</code> <p>The operation IDs to retrieve metadata for.</p> <code>None</code> <code>root_ids</code> <code>list of int</code> <p>The root IDs to retrieve metadata for.</p> <code>None</code> <code>client</code> <code>CAVEclient</code> <p>The CAVEclient instance to use.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The metadata for the operations or root IDs. Metadata includes:</p> <ul> <li><code>operation_id</code>: The operation ID.</li> <li><code>timestamp</code>: The timestamp of the operation.</li> <li><code>location</code>: The approximate [x,y,z] centroid of the operation in nanometers.</li> <li><code>volume_added</code>: The volume added by the operation in cubic nanometers.</li> <li><code>volume_removed</code>: The volume removed by the operation in cubic nanometers.</li> <li><code>n_added_nodes</code>: The number of level2 nodes added by the operation.</li> <li><code>n_removed_nodes</code>: The number of level2 nodes removed by the operation.</li> <li><code>n_modified_nodes</code>: The number of level2 nodes modified by the operation.</li> <li><code>n_added_edges</code>: The number of level2 edges added by the operation.</li> <li><code>n_removed_edges</code>: The number of level2 edges removed by the operation.</li> <li><code>n_modified_edges</code>: The number of level2 edges modified by the operation.</li> </ul>"},{"location":"reference/#paleo.get_metaedits","title":"<code>get_metaedits(networkdeltas)</code>","text":"<p>Combine edits into meta-edits based on shared nodes.</p> <p>Meta-edits are groups of one or more edits which affected a local region in the chunkedgraph. More specifically, they are defined as groups of edits which are connected components in a graph where nodes are edits and edges are shared nodes between edits.</p> <p>Parameters:</p> Name Type Description Default <code>networkdeltas</code> <code>dict[Integer, NetworkDelta]</code> <p>The changes to the level2 graph from each operation.</p> required <p>Returns:</p> Type Description <code>dict[Integer, NetworkDelta]</code> <p>The changes to the level2 graph from each meta-operation.</p> <code>dict[Integer, list[Integer]]</code> <p>A mapping of meta-operation IDs to the operation IDs that make them up.</p>"},{"location":"reference/#paleo.get_operation_level2_edit","title":"<code>get_operation_level2_edit(operation_id, client, before_root_ids=None, after_root_ids=None, timestamp=None, point=None, radius=20000, metadata=False)</code>","text":"<p>Extract changes to the level2 graph for a specific operation.</p> <p>Parameters:</p> Name Type Description Default <code>operation_id</code> <code>int</code> <p>The operation ID to extract changes for.</p> required <code>client</code> <code>CAVEclient</code> <p>The CAVEclient instance to use.</p> required <code>before_root_ids</code> <code>Optional[Collection[int]]</code> <p>The root ID(s) that were involved in the operation prior to it happening. If None, these will be looked up.</p> <code>None</code> <code>after_root_ids</code> <code>Optional[Collection[int]]</code> <p>The root ID(s) that were created by the operation. If None, these will be looked up.</p> <code>None</code> <code>timestamp</code> <code>Optional[datetime]</code> <p>The timestamp of the operation. Only used if <code>before_root_ids</code> is not provided. If None, this will be looked up.</p> <code>None</code> <code>point</code> <code>Optional[ndarray]</code> <p>The point to center the bounding box on. If None, will compare the entire level2 graphs of the objects before and after the operation.</p> <code>None</code> <code>radius</code> <code>Number</code> <p>The radius of the bounding box to use.</p> <code>20000</code> <code>metadata</code> <code>bool</code> <p>Whether to include metadata about the changes in the output.</p> <code>False</code> <p>Returns:</p> Type Description <code>NetworkDelta</code> <p>The changes to the level2 graph from this operation.</p>"},{"location":"reference/#paleo.get_operations_level2_edits","title":"<code>get_operations_level2_edits(operation_ids, client, radius=20000, metadata=False, n_jobs=-1, verbose=True)</code>","text":"<p>Extract changes to the level2 graph for a list of operations.</p> <p>Parameters:</p> Name Type Description Default <code>operation_ids</code> <code>Union[Collection[Integer], Integer]</code> <p>The operation ID(s) to extract changes for.</p> required <code>client</code> <code>CAVEclient</code> <p>The CAVEclient instance to use.</p> required <code>radius</code> <code>Number</code> <p>The radius of the bounding box to use.</p> <code>20000</code> <code>metadata</code> <code>bool</code> <p>Whether to include metadata about the changes in the output.</p> <code>False</code> <code>n_jobs</code> <code>int</code> <p>The number of jobs to run in parallel. If -1, will use all available cores.</p> <code>-1</code> <code>verbose</code> <code>bool</code> <p>Whether to display a progress bar.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[Integer, NetworkDelta]</code> <p>The changes to the level2 graph from these operations</p>"},{"location":"reference/#paleo.get_root_level2_edits","title":"<code>get_root_level2_edits(root_id, client, radius=20000, metadata=False, filtered=False, n_jobs=-1, verbose=True)</code>","text":"<p>Extract changes to the level2 graph for all operations on a root.</p> <p>Parameters:</p> Name Type Description Default <code>root_id</code> <code>Integer</code> <p>The root ID to extract changes for.</p> required <code>client</code> <code>CAVEclient</code> <p>The CAVEclient instance to use.</p> required <code>radius</code> <code>Number</code> <p>The radius of the bounding box to use.</p> <code>20000</code> <code>metadata</code> <code>bool</code> <p>Whether to include metadata about the changes in the output.</p> <code>False</code> <code>filtered</code> <code>bool</code> <p>Whether to filter the change log to only include changes which affect the final state of the root ID.</p> <code>False</code> <code>n_jobs</code> <code>int</code> <p>The number of jobs to run in parallel. If -1, will use all available cores.</p> <code>-1</code> <code>verbose</code> <code>bool</code> <p>Whether to display a progress bar.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[Integer, NetworkDelta]</code> <p>The changes to the level2 graph from each operation</p>"},{"location":"reference/#paleo.get_initial_graph","title":"<code>get_initial_graph(root_id, client, verbose=True, return_as='networkx', n_jobs=-1)</code>","text":"<p>Get the initial graph for a given <code>root_id</code>, including objects that could become part of the neuron in the future.</p>"},{"location":"reference/#paleo.get_node_aliases","title":"<code>get_node_aliases(supervoxel_id, client, stop_layer=2, return_as='list')</code>","text":"<p>For a given supervoxel, get the node that it was part of at <code>stop_layer</code> for each timestamp.</p>"},{"location":"reference/#paleo.get_component_masks","title":"<code>get_component_masks(components)</code>","text":"<p>From a list of components, get a node by component boolean DataFrame of masks.</p>"},{"location":"reference/#paleo.get_nucleus_supervoxel","title":"<code>get_nucleus_supervoxel(root_id, client)</code>","text":"<p>Get the supervoxel corresponding to the nucleus of a neuron by looking it up in the soma table.</p>"},{"location":"reference/#paleo.get_nodes_aliases","title":"<code>get_nodes_aliases(supervoxel_ids, client, stop_layer=2, verbose=True, return_as='list')</code>","text":"<p>For a list of supervoxels, get all of the nodes at <code>stop_layer</code> that they were part of across time.</p>"},{"location":"reference/#paleo.get_supervoxel_mappings","title":"<code>get_supervoxel_mappings(supervoxel_ids, edits, client, n_jobs=-1)</code>","text":"<p>For a set of supervoxels and edits, get a mapping between the supervoxels and any level2 nodes they could have been part of across time.</p>"},{"location":"reference/#paleo.get_changed_nodes","title":"<code>get_changed_nodes(edits)</code>","text":"<p>From a set of edits, get the nodes that have changed (added or removed).</p>"},{"location":"reference/#paleo.get_used_node_ids","title":"<code>get_used_node_ids(initial_graph, edits, anchor_nodes)</code>","text":"<p>Starting from an initial graph and a series of edits, get the nodes that are used in at least one state of the graph throughout its history.</p> <p>Parameters:</p> Name Type Description Default <code>initial_graph</code> <code>Graph</code> <p>The initial graph to start from.</p> required <code>edits</code> <code>dict</code> <p>A dictionary of edits where the key is the <code>operation_id</code> and the value is a <code>NetworkDelta</code> object.</p> required <code>anchor_nodes</code> <code>list</code> <p>A list of nodes that are on the object of interest, used to pick the connected component to consider at each point in the history.</p> required <p>Returns:</p> Type Description <p>Nodes that are ever used in the history of the graph.</p>"},{"location":"reference/#paleo.apply_edit","title":"<code>apply_edit(graph, networkdelta)</code>","text":"<p>Apply the edit described by the networkdelta to the graph.</p>"},{"location":"reference/#paleo.resolve_edit","title":"<code>resolve_edit(graph, networkdelta, anchor_nodes)</code>","text":"<p>Apply the edit described by the networkdelta and return the connected component containing the anchor node.</p>"},{"location":"reference/#paleo.find_anchor_node","title":"<code>find_anchor_node(graph, anchor_nodes)</code>","text":"<p>Find the first anchor node that is in the graph.</p>"},{"location":"reference/#paleo.apply_edit_sequence","title":"<code>apply_edit_sequence(graph, edits, anchor_nodes, return_graphs=False, include_initial=True, remove_unchanged=False, verbose=True)</code>","text":"<p>Apply a sequence of edits to the graph in order, storing information about intermediate states.</p>"},{"location":"reference/#paleo.get_mutable_synapses","title":"<code>get_mutable_synapses(root_id, edits, client, sides='both', synapse_table=None, remove_self=True, verbose=False, n_jobs=-1)</code>","text":"<p>Get all synapses that could have been part of this <code>root_id</code> across all states.</p>"},{"location":"reference/#paleo.map_synapses_to_sequence","title":"<code>map_synapses_to_sequence(synapses, nodes_by_state, side='pre', verbose=True)</code>","text":"<p>Map synapses (with level2 node information) to a sequence of level2 nodes/graphs.</p> <p>Parameters:</p> Name Type Description Default <code>synapses</code> <code>DataFrame</code> <p>A dataframe of synapses with a column \"{side}_pt_level2_id\" that describes what level2 node the synapse is on. Note that a single synapse ID can be associated with multiple level2 nodes, denoted by multiple rows. This specific synapse table can be generated using <code>paleo.get_mutable_synapses</code>.</p> required <code>nodes_by_state</code> <code>dict[list, Graph]</code> <p>A dictionary mapping each state IDs to either a list of level2 nodes or a level2 graph.</p> required <code>side</code> <code>str</code> <p>The side of the synapse to map to the sequence of states, either \"pre\" or \"post\".</p> <code>'pre'</code> <code>verbose</code> <code>bool</code> <p>Whether to display a progress bar.</p> <code>True</code> <code>Returns</code> required"},{"location":"reference/#paleo.skeletonize_sequence","title":"<code>skeletonize_sequence(graphs_by_state, client=None, root_id=None, root_point=None, level2_data=None, remove_unchanged=False, return_as='meshparty', n_jobs=-1, verbose=True)</code>","text":"<p>Generate skeletons for a sequence of graphs.</p> <p>Parameters:</p> Name Type Description Default <code>graphs_by_state</code> <code>dict</code> <p>A dictionary mapping state IDs to NetworkX graphs.</p> required <code>client</code> <code>Optional[CAVEclient]</code> <p>A CAVEclient instance.</p> <code>None</code> <code>root_id</code> <code>Optional[int]</code> <p>The ID of the root node, used to determine the root point for skeletonization if <code>root_point</code> is not provided.</p> <code>None</code> <code>root_point</code> <code>Optional[ndarray]</code> <p>The root point for skeletonization. If not provided, it will be determined using the <code>root_id</code> and <code>client</code>.</p> <code>None</code> <code>level2_data</code> <code>Optional[DataFrame]</code> <p>The level 2 data table, containing the node coordinates in columns \"rep_coord_nm_x\", \"rep_coord_nm_y\", \"rep_coord_nm_z\".</p> <code>None</code> <code>remove_unchanged</code> <code>bool</code> <p>Whether to remove states with no changes from the previous state from the sequence.</p> <code>False</code> <code>return_as</code> <code>Literal['meshparty', 'arrays', 'networkx']</code> <p>The format to return the skeletons in. Options are \"meshparty\", \"arrays\", and \"networkx\".</p> <code>'meshparty'</code> <code>n_jobs</code> <code>int</code> <p>The number of jobs to run in parallel. See joblib.Parallel for more details.</p> <code>-1</code> <code>verbose</code> <code>bool</code> <p>Whether to display progress bars.</p> <code>True</code>"},{"location":"reference/#paleo.compare_skeletons","title":"<code>compare_skeletons(skeleton1, skeleton2, return_as_spatial=False)</code>","text":"<p>Compare two skeletons, finding the network changes between them.</p> <p>Parameters:</p> Name Type Description Default <code>skeleton1</code> <p>The first skeleton to compare.</p> required <code>skeleton2</code> <p>The second skeleton to compare.</p> required <code>return_as_spatial</code> <code>bool</code> <p>Whether to return the changes in the original spatial coordinates, by default False.</p> <code>False</code> <p>Returns:</p> Type Description <code>NetworkDelta</code> <p>The changes between the two skeletons.</p> <code>ndarray</code> <p>Array of the positions of all nodes referenced between the two skeletons. Note that the deltas are references to the positions in this array, unless they were already replaced if <code>return_as_spatial=True</code>.</p>"},{"location":"reference/#paleo.check_skeleton_changes","title":"<code>check_skeleton_changes(skeletons_by_state)</code>","text":"<p>Check if each skeleton in a sequence is different, compared to the one before it.</p> <p>Parameters:</p> Name Type Description Default <code>skeletons_by_state</code> <code>dict</code> <p>A dictionary mapping state IDs to skeletons.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary mapping state IDs to whether the skeleton is different from the previous one.</p>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#problem-statement","title":"Problem statement","text":"<p>Many connectome datasets have undergone heavy proofreading. Information has been logged in the chunkedgraph about how each edit in a dataset affected the segmentation. However, accessing this information requires some knowledge of the chunkedgraph and how the editing infrastructure works. It often requires hitting several endpoints to get out specific information about what has changed. Further, if one is trying to compute derived metadata about how an edit affected things (e.g., \"how many synapses were added by this edit?\"), this requires even more in depth knowledge about the CAVE ecosystem.</p> <p>The goal of <code>paleo</code> is to make this information more accessible by exposing some derived information from edit histories.</p> <p>The philosophy will be to first create an API around these features in this Python package, and make sure that it is useful and easy to use. Some of this information will be fairly slow and burdensome to compute, so in the future we may want to create server-side implementations for some of it. Nevertheless, the Python package will be a good starting point for understanding what is possible and what is useful.</p> <p>Some potential applications of this work include:</p> <ul> <li>Tooling for monitoring proofreading progress, possibly in real-time</li> <li>Visualization of proofreading progress</li> <li>Data extraction for training automated proofreading algorithms</li> <li>Development of metrics for weighting the impact individual edits</li> <li>Attaching semantic information to edits, such as \"this edit is an undo\"</li> <li>Developing models of how well proofread a cell is</li> </ul> <p>Here, we describe some of the possible features we might want to implement in <code>paleo</code>.</p>"},{"location":"roadmap/#comparison-targets","title":"Comparison targets","text":"<p>What quantities might we want to compare between roots, operations, timepoints, etc.?</p>"},{"location":"roadmap/#morphology-representationsfeatures","title":"Morphology representations/features","text":"<p>One type of comparison is between representations of morphology at various resolutions. These comparisons would return something like <code>added_nodes</code>, <code>removed_nodes</code>, <code>added_edges</code>, <code>removed_edges</code>, etc. For an example, see the functions currently implemented in <code>paleo</code>, which do this already for <code>level2_graphs</code>.</p> <ul> <li><code>supervoxel_graphs</code></li> <li><code>level2_graphs</code></li> <li><code>skeletons</code></li> <li><code>meshes</code></li> <li><code>synapses</code></li> </ul>"},{"location":"roadmap/#statistics","title":"Statistics","text":"<p>We also might want to have comparisons of derived statistics of morphology and connectivity. Many of these would be derived from the representations above. I imagine that for any of these statistics, there would be something like <code>path_length_added</code>, <code>path_length_removed</code>, <code>path_length_net</code> (added - removed, so could be negative).</p> <ul> <li><code>n_level2_nodes</code> (this is actually a decent proxy for path length, w/o skeletonizing)</li> <li><code>path_lengths</code></li> <li><code>volume</code></li> <li><code>n_synapses</code></li> <li><code>n_pre_synapses</code></li> <li><code>n_post_synapses</code></li> <li><code>n_edits</code></li> <li><code>n_merges</code></li> <li><code>n_splits</code></li> </ul>"},{"location":"roadmap/#comparison-types","title":"Comparison types","text":"<p>For any of the above comparisons, what inputs would be convenient to provide?</p> <ul> <li><code>compare_roots_{target}</code>: given two roots, compare the target feature.</li> <li><code>compare_operation_{target}</code>: given a specific operation ID, compare the target features before and after.</li> <li><code>compare_operations_{target}</code>: given a list of operation IDs, compare the target features before and after for each operation.</li> <li><code>compare_root_operations_{target}</code>: given a root, compare the target features before and after each operation in its history.</li> <li><code>compare_timepoints_{target}</code>: given two timepoints and a root/nucleus ID, compare the target features between the timepoints.</li> </ul>"},{"location":"examples/skeletonize_history/","title":"Skeletonizing along a history","text":"<p>Note</p> <p>This notebook requires <code>pcg_skel</code> to be installed, which is an optional dependency of <code>paleo</code>. You can install it with <code>pip install pcg-skel</code>, or when installing <code>paleo</code> do <code>pip install paleo[skeleton]</code>.</p> <p>This notebook will demonstrate how to use the extracted level2 graph edits to skeletonize a neuron at every point in its history. This can be much faster than repeatedly skeletonizing the neuron from scratch, since much of the information used for skeletonization (e.g. level2 graph, node positions, etc) is reused across the history.</p> <pre><code>import time\n\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom pcg_skel import pcg_skeleton, pcg_skeleton_direct\nfrom tqdm import tqdm\n\nfrom caveclient import CAVEclient\nfrom paleo import (\n    apply_edit,\n    get_initial_graph,\n    get_node_aliases,\n    get_nucleus_supervoxel,\n    get_root_level2_edits,\n)\n\nroot_id = 864691135639556411\n\nclient = CAVEclient(\"minnie65_public\", version=1078)\n\ntotal_time = time.time()\n</code></pre> <pre><code>currtime = time.time()\nedits = get_root_level2_edits(root_id, client)\nget_edit_time = time.time() - currtime\nprint(f\"{get_edit_time:.3f} seconds elapsed to get edits.\")\n\ncurrtime = time.time()\ninitial_graph = get_initial_graph(root_id, client)\nget_graph_time = time.time() - currtime\nprint(f\"{get_graph_time:.3f} seconds elapsed to get initial graph.\")\n\ncurrtime = time.time()\n\nnuc_supervoxel_id = get_nucleus_supervoxel(root_id, client)\n\nnode_info = get_node_aliases(nuc_supervoxel_id, client, stop_layer=2)\n\nnuc_table = client.info.get_datastack_info()[\"soma_table\"]\nnuc_info = client.materialize.query_table(\n    nuc_table, filter_equal_dict=dict(pt_root_id=root_id)\n)\nnuc_loc = nuc_info[\"pt_position\"].values[0]\n\nget_nuc_info_time = time.time() - currtime\nprint(f\"{get_nuc_info_time:.3f} seconds elapsed to get nucleus info.\")\n</code></pre> <pre>\n<code>Extracting level2 edits:   0%|          | 0/693 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>98.200 seconds elapsed to get edits.\n</code>\n</pre> <pre>\n<code>Getting initial graph:   0%|          | 0/309 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>46.651 seconds elapsed to get initial graph.\n2.393 seconds elapsed to get nucleus info.\n</code>\n</pre> <p>While this part isn't strictly necessary, here I'll show how to replay edits on a neuron. This is helpful here for knowing which level2 nodes actually ever make it into our neuron of interest.</p> <pre><code>def find_level2_node(graph, level2_ids):\n    for level2_id in level2_ids:\n        if graph.has_node(level2_id):\n            return level2_id\n    return None\n\n\ncurrtime = time.time()\n\ngraph = initial_graph.copy()\n\n# keep track of components that are reached as we go\ncomponents = []\n\n# store the initial state\nnucleus_node_id = find_level2_node(graph, node_info.index)\ncomponent = nx.node_connected_component(graph, nucleus_node_id)\ncomponents.append(component)\n\n# after each edit, apply it and store the connected component for the nucleus node\nfor edit_id, edit in tqdm(edits.items(), disable=False):\n    apply_edit(graph, edit)\n    nucleus_node_id = find_level2_node(graph, node_info.index)\n    component = nx.node_connected_component(graph, nucleus_node_id)\n    components.append(component)\n\n# component_masks = get_component_masks(components)\nused_l2_ids = np.unique(np.concatenate([list(c) for c in components]))\n\nget_used_time = time.time() - currtime\nprint(f\"{get_used_time:.3f} seconds elapsed to get used level2 ids.\")\n</code></pre> <pre>\n<code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 693/693 [00:02&lt;00:00, 254.35it/s]\n</code>\n</pre> <pre>\n<code>4.319 seconds elapsed to get used level2 ids.\n</code>\n</pre> <p>Now, for every level2 node that gets used in this neuron's history, we will use the level2 cache to get the node's position.</p> <pre><code>def get_l2data(level2_ids):\n    l2_data = client.l2cache.get_l2data(\n        level2_ids,\n        attributes=[\"area_nm2\", \"max_dt_nm\", \"mean_dt_nm\", \"size_nm3\", \"rep_coord_nm\"],\n    )\n\n    l2_nodes = pd.DataFrame(l2_data).T\n    l2_nodes.index = l2_nodes.index.astype(int)\n    l2_nodes[\"x\"] = l2_nodes[\"rep_coord_nm\"].apply(lambda x: x[0])\n    l2_nodes[\"y\"] = l2_nodes[\"rep_coord_nm\"].apply(lambda x: x[1])\n    l2_nodes[\"z\"] = l2_nodes[\"rep_coord_nm\"].apply(lambda x: x[2])\n    l2_nodes.drop(columns=[\"rep_coord_nm\"], inplace=True)\n    return l2_nodes\n\n\ncurrtime = time.time()\n\nl2data = get_l2data(used_l2_ids)\n\nget_l2data_time = time.time() - currtime\nprint(f\"{get_l2data_time:.3f} seconds elapsed to get l2 data.\")\n</code></pre> <pre>\n<code>6.287 seconds elapsed to get l2 data.\n</code>\n</pre> <pre><code>def skeletonize(graph):\n    nucleus_node_id = find_level2_node(graph, node_info.index)\n    component = nx.node_connected_component(graph, nucleus_node_id)\n    subgraph = graph.subgraph(component)\n    component = pd.Index(list(component))\n    vertices = l2data.loc[component, [\"x\", \"y\", \"z\"]].values\n    edges = nx.to_pandas_edgelist(subgraph).values\n    edges = np.vectorize(component.get_loc)(edges)\n    print(len(edges))\n    skeleton = pcg_skeleton_direct(vertices, edges, root_point=nuc_loc)\n    return skeleton\n\n\ncurrtime = time.time()\n\ngraph = initial_graph.copy()\n\nskeletons = {}\n\n# initial skeleton\nskeleton = skeletonize(graph)\nskeletons[-1] = skeleton\n\n# skeletons as we edit\nfor edit_id, edit in tqdm(edits.items(), desc=\"Skeletonizing states\", disable=True):\n    apply_edit(graph, edit)\n    skeleton = skeletonize(graph)\n    skeletons[edit_id] = skeleton\n\nskeletonize_time = time.time() - currtime\n\nprint(f\"{skeletonize_time:.3f} seconds elapsed to skeletonize.\")\n\ntotal_time = time.time() - total_time\n</code></pre> <pre>\n<code>71\n71\n71\n71\n71\n71\n71\n71\n71\n71\n71\n71\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4579\n4784\n4793\n4781\n4781\n4781\n6286\n6232\n7747\n7161\n7141\n7186\n7186\n7186\n7186\n7186\n7186\n7186\n7186\n7167\n7164\n7156\n7150\n7146\n7131\n7129\n7122\n7047\n6549\n6528\n6449\n6415\n6407\n6052\n6047\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6041\n6058\n6058\n6058\n6058\n6058\n6058\n6058\n6058\n6058\n6058\n6058\n6058\n6058\n6058\n6058\n6058\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7001\n7269\n7267\n7267\n7267\n7267\n7267\n7267\n7267\n7267\n7314\n7314\n7314\n7314\n7314\n7314\n7314\n7314\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n7346\n8035\n8038\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8042\n8056\n8056\n8056\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8170\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n8781\n9053\n9053\n9053\n9053\n9053\n9053\n9053\n9053\n9053\n9053\n9053\n9053\n9053\n9053\n9053\n9053\n9391\n9391\n9391\n9392\n9392\n9392\n9392\n9392\n9392\n9427\n9427\n9427\n9427\n9427\n9427\n9427\n9427\n9427\n9427\n9427\n9427\n9674\n9674\n9674\n9674\n9674\n9912\n9912\n9912\n9912\n9912\n9912\n9912\n9912\n9917\n9928\n9973\n9973\n9973\n9973\n10088\n10073\n10073\n10073\n10073\n10096\n10096\n10096\n10096\n10096\n10096\n10096\n10096\n10252\n10252\n10252\n10252\n10252\n10252\n10252\n10252\n10252\n10252\n10252\n10252\n10268\n4730\n4728\n4727\n4726\n4725\n4720\n4718\n4713\n4711\n4709\n4706\n4705\n4700\n4698\n4694\n4689\n4685\n4683\n4682\n4680\n4675\n4673\n4672\n10210\n121.726 seconds elapsed to skeletonize.\n</code>\n</pre> <pre><code>print(f\"Total time: {total_time:.0f} seconds\\n\")\nget_edits_prop = get_edit_time / total_time\nget_graph_prop = get_graph_time / total_time\nget_nuc_info_prop = get_nuc_info_time / total_time\nget_used_prop = get_used_time / total_time\nget_l2data_prop = get_l2data_time / total_time\nskeletonize_prop = skeletonize_time / total_time\n\nprint(f\"Get edits: {get_edits_prop:.0%}, {get_edit_time:.0f} seconds\")\nprint(f\"Get initial graph: {get_graph_prop:.0%}, {get_graph_time:.0f} seconds\")\nprint(f\"Get nucleus info: {get_nuc_info_prop:.0%}, {get_nuc_info_time:.0f} seconds\")\nprint(f\"Get used level2 ids: {get_used_prop:.0%}, {get_used_time:.0f} seconds\")\nprint(f\"Get l2 data: {get_l2data_prop:.0%}, {get_l2data_time:.0f} seconds\")\nprint(f\"Skeletonize: {skeletonize_prop:.0%}, {skeletonize_time:.0f} seconds\")\n</code></pre> <pre>\n<code>Total time: 280 seconds\n\nGet edits: 35%, 98 seconds\nGet initial graph: 17%, 47 seconds\nGet nucleus info: 1%, 2 seconds\nGet used level2 ids: 2%, 4 seconds\nGet l2 data: 2%, 6 seconds\nSkeletonize: 44%, 122 seconds\n</code>\n</pre> <pre><code># pick an edit to check\nedit_id = 532299\n\n# note: this would have to be adjusted for other edits, where roots[1] may not be the\n# nucleus root ID\nroot_after_op = client.chunkedgraph.get_operation_details([edit_id])[str(edit_id)][\n    \"roots\"\n][1]\n\ncurrtime = time.time()\nscratch_skeleton = pcg_skeleton(\n    root_after_op,\n    client,\n    root_point=nuc_loc,\n    root_point_resolution=[1, 1, 1],\n)\nprint(f\"{time.time() - currtime:.3f} seconds elapsed to skeletonize once from scratch.\")\n</code></pre> <pre>\n<code>7.577 seconds elapsed to skeletonize once from scratch.\n</code>\n</pre> <pre><code>history_skeleton = skeletons[edit_id]\n</code></pre> <p>Let's check if these skeletons are isomorphic - since nodes/edges may not have a consistent ordering, we'll sort the nodes by position and use that order to reindex the edges before comparing. We see that the two skeletons have identical node positions.</p> <pre><code>history_skeleton_nodes = pd.DataFrame(history_skeleton.vertices).sort_values([0, 1, 2])\nscratch_skeleton_nodes = pd.DataFrame(scratch_skeleton.vertices).sort_values([0, 1, 2])\n(history_skeleton_nodes.values == scratch_skeleton_nodes.values).all()\n</code></pre> <pre>\n<code>True</code>\n</pre> <p>And identical edges.</p> <pre><code>history_skeleton_edges = history_skeleton.edges\nhistory_skeleton_edges = np.vectorize(history_skeleton_nodes.index.get_loc)(\n    history_skeleton_edges\n)\n\nscratch_skeleton_edges = scratch_skeleton.edges\nscratch_skeleton_edges = np.vectorize(scratch_skeleton_nodes.index.get_loc)(\n    scratch_skeleton_edges\n)\n\n(history_skeleton_edges == scratch_skeleton_edges).all()\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>skeleton_info = []\nfor i, (operation_id, skeleton) in enumerate(skeletons.items()):\n    skeleton_info.append(\n        {\n            \"state\": i,\n            \"operation_id\": operation_id,\n            \"n_vertices\": len(skeleton.vertices),\n            \"n_edges\": len(skeleton.edges),\n            \"path_length\": skeleton.path_length(),\n            \"n_branch_points\": len(skeleton.branch_points),\n            \"n_end_points\": len(skeleton.end_points),\n        }\n    )\n\nskeleton_info = pd.DataFrame(skeleton_info)\n</code></pre> <pre><code>sns.set_context(\"talk\")\nfig, axs = plt.subplots(1, 3, figsize=(15, 5), layout=\"constrained\")\nfor i, feature in enumerate([\"path_length\", \"n_branch_points\", \"n_end_points\"]):\n    sns.lineplot(data=skeleton_info, x=\"state\", y=feature, ax=axs[i])\n    axs[i].set_ylabel(feature.capitalize().replace(\"_\", \" \"))\n    axs[i].set_xlabel(\"State\")\n</code></pre> <pre><code>import pyvista as pv\n\nplotter = pv.Plotter()\nplotter.open_gif(\"skeleton_evolution.gif\", fps=30)\n\n\ndef skel_to_poly(skeleton):\n    vertices = skeleton.vertices\n    edges = skeleton.edges\n    lines = np.full((len(edges), 3), 2)\n    lines[:, 1:] = edges\n    line_poly = pv.PolyData(vertices, lines=lines)\n    return line_poly\n\n\nlast_skeleton = skeletons[list(skeletons.keys())[-1]]\nactor = plotter.add_mesh(skel_to_poly(last_skeleton), color=\"black\", line_width=2)\nplotter.write_frame()\nplotter.remove_actor(actor)\n\nfor edit_id, skeleton in skeletons.items():\n    line_poly = skel_to_poly(skeleton)\n    actor = plotter.add_mesh(line_poly, color=\"black\", line_width=2)\n    text = plotter.add_text(f\"Edit {edit_id}\", position=\"upper_edge\", font_size=24)\n    plotter.write_frame()\n    plotter.remove_actor(actor)\n\nplotter.close()\n</code></pre> <p></p>"},{"location":"examples/skeletonize_history/#collecting-the-necessary-ingredients","title":"Collecting the necessary ingredients","text":"<p>We'll start by using some common functions in <code>paleo</code> to extract the edit history of a neuron, the initial state of all objects in its history, and some information about the neuron's nucleus. See the example notebooks on edit extraction and edit replay for more context.</p>"},{"location":"examples/skeletonize_history/#skeletonizing","title":"Skeletonizing","text":"<p>Finally, we have all of the ingredients we need to skeletonize the neuron at every point in its history. At this point, we are done with API calls since we collected all the information we need ahead of time. With this in hand, we can call <code>pcg_skeleton_direct</code> to apply the TEASAR algorithm to skeletonize the neuron at every point in its history.</p>"},{"location":"examples/skeletonize_history/#compare-to-skeletonizing-from-scratch","title":"Compare to skeletonizing from scratch","text":"<p>Let's make sure that the skeletonization we did from the history is consistent with what we would have gotten if we skeletonized from scratch.</p>"},{"location":"examples/skeletonize_history/#computing-features","title":"Computing features","text":"<p>As an example of why this process can be useful, let's see how some topological properties of the neuron evolved over the course of proofreading.</p>"},{"location":"tutorials/extraction/","title":"Extracting edits","text":"<p>We provide a utility function for combining the output of a <code>CAVEclient</code>'s <code>chunkedgraph.get_tabular_change_log</code> and <code>chunkedgraph.get_operation_details</code>.</p> <p>Note</p> <p>This probably belongs in <code>CAVEclient</code></p> <pre><code>from caveclient import CAVEclient\nfrom paleo import get_detailed_change_log\n\nroot_id = 864691135639556411\n\nclient = CAVEclient(\"minnie65_phase3_v1\")\n\nchange_log = get_detailed_change_log(root_id, client, filtered=False)\nchange_log.iloc[:, :5]\n</code></pre> user_id before_root_ids after_root_ids is_merge in_neuron operation_id 9028 161 [864691135338600033, 864691135349337074] [864691134884740858] True False 14768 161 [864691135437585906, 864691136156871317] [864691136272932030] True False 25672 161 [864691135190922026, 864691135566303299] [864691135493963920] True False 26481 161 [864691134843526581, 864691135573183940] [864691135415463098] True False 30000 161 [864691134975250238, 864691135587889860] [864691135476114088] True False ... ... ... ... ... ... 532312 2378 [864691135475323712] [864691137054392182] False True 532314 2378 [864691137054392182] [864691136089721911] False True 532327 2378 [864691136089721911] [864691135975162223] False True 532335 2378 [864691135975162223] [864691135851270855] False True 532354 2378 [864691135614747083, 864691135851270855] [864691135639556411] True True <p>693 rows \u00d7 5 columns</p> <pre><code>edit_id = change_log.index[0]\nedit_id\n</code></pre> <pre>\n<code>9028</code>\n</pre> <pre><code>import time\nfrom paleo import get_operation_level2_edit\n\ncurrtime = time.time()\nl2_edit = get_operation_level2_edit(edit_id, client)\nprint(f\"{time.time() - currtime:.3f} seconds elapsed.\")\n</code></pre> <pre>\n<code>4.092 seconds elapsed.\n</code>\n</pre> <p>This returns a <code>paleo.NetworkDelta</code> object. This is a lightweight class for storing what edges/nodes are added/removed by an operation, as well as (optionally) a dictionary of arbitrary metadata.</p> <pre><code>l2_edit\n</code></pre> <pre>\n<code>NetworkDelta(\n   removed_nodes: 26,\n   added_nodes: 9,\n   removed_edges: 63,\n   added_edges: 33,\n   metadata: {}\n)</code>\n</pre> <pre><code>from paleo import get_operations_level2_edits\n\ncurrtime = time.time()\nl2_edits = get_operations_level2_edits(change_log.index, client)\nprint(f\"{time.time() - currtime:.3f} seconds elapsed.\")\n</code></pre> <pre>\n<code>Extracting level2 edits:   0%|          | 0/693 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>122.348 seconds elapsed.\n</code>\n</pre> <p>This returns a dictionary, where the keys are the operation IDs and the values are the corresponding <code>paleo.NetworkDelta</code> objects.</p> <p>We get even more of a speedup if all of those changes are from the history of one root ID. Again, this is just because of the way current endpoints are structured (some of the information we need is available from <code>CAVEclient.chunkedgraph.get_tabular_change_log</code>).</p> <pre><code>from paleo import get_root_level2_edits\n\ncurrtime = time.time()\nl2_edits = get_root_level2_edits(root_id, client)\nprint(f\"{time.time() - currtime:.3f} seconds elapsed.\")\n</code></pre> <pre>\n<code>Extracting level2 edits:   0%|          | 0/693 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>59.575 seconds elapsed.\n</code>\n</pre> <pre><code>from paleo import get_metaedits\n\nmetaedits, metaedit_mapping = get_metaedits(l2_edits)\n</code></pre> <pre><code>metaedits[23]\n</code></pre> <pre>\n<code>NetworkDelta(\n   removed_nodes: 5,\n   added_nodes: 7,\n   removed_edges: 17,\n   added_edges: 19,\n   metadata: {}\n)</code>\n</pre> <pre><code>member_edits = metaedit_mapping[23]\nfor edit in member_edits:\n    print(list(l2_edits[edit].added_nodes))\n</code></pre> <pre>\n<code>[161733831655687152]\n[161663462911509525, 161663462911509526, 161733831655687154, 161733831655687155]\n[161663462911509527, 161733831655687156]\n</code>\n</pre> <pre><code>metaedits[23].added_nodes\n</code></pre> <pre>\n<code>array([161733831655687152, 161663462911509525, 161663462911509526,\n       161733831655687154, 161733831655687155, 161663462911509527,\n       161733831655687156])</code>\n</pre>"},{"location":"tutorials/extraction/#extracting-edits-to-the-level2-graph","title":"Extracting edits to the level2 graph","text":""},{"location":"tutorials/extraction/#get-a-more-detailed-change-log-for-a-root-id","title":"Get a more detailed change log for a root ID","text":""},{"location":"tutorials/extraction/#get-the-changes-to-the-level2-graph-for-a-specific-edit","title":"Get the changes to the level2 graph for a specific edit","text":""},{"location":"tutorials/extraction/#get-the-changes-to-the-level2-graph-for-multiple-edits","title":"Get the changes to the level2 graph for multiple edits","text":"<p>With the current set of endpoints and design of the chunkedgraph, it is faster to get a list of changes using this function rather than putting paleo.get_operation_level2_edit in a loop.</p>"},{"location":"tutorials/extraction/#get-the-changes-to-the-level2-graph-for-all-edits-to-a-root-id","title":"Get the changes to the level2 graph for all edits to a root ID","text":""},{"location":"tutorials/extraction/#combine-edits-that-affect-the-same-points-on-the-level2-graph","title":"Combine edits that affect the same points on the level2 graph","text":"<p>Often it is helpful to combine edits that affect the same points on the level2 graph. This can be useful for finding things like edits that were undone by later edits.</p> <p>Currently, this function defines metaedits as those that affect the same points on the level2 graph (more specifically, connected components in a graph where nodes are edits and edges are shared points on the level2 graph). In the future, this could support other schemes for defining metaedits.</p>"},{"location":"tutorials/replay/","title":"Replaying edits","text":"<p>Once we have extracted the edits that have happened to a neuron (see here), it can be helpful to replay them in order to see how the neuron has changed over time.</p> <pre><code>import networkx as nx\nfrom tqdm.auto import tqdm\n\nfrom caveclient import CAVEclient\nfrom paleo import get_initial_graph, get_root_level2_edits\n</code></pre> <p>As in the previous example, we'll start by extracting the edits to a neuron.</p> <pre><code>root_id = 864691135639556411\n\nclient = CAVEclient(\"minnie65_public\", version=1078)\n\nnetworkdeltas = get_root_level2_edits(root_id, client)\n</code></pre> <pre>\n<code>Extracting level2 edits:   0%|          | 0/693 [00:00&lt;?, ?it/s]</code>\n</pre> <p>This time, we'll also use <code>paleo.get_initial_graph</code> to get the level2 graph connectivity for all objects that participate in this neuron's edit history. This will allow us to replay the edits in the context of the full segmentation graph.</p> <pre><code>initial_graph = get_initial_graph(root_id, client)\n</code></pre> <pre>\n<code>/Users/ben.pedigo/code/cave-edits/paleo/.venv/lib/python3.12/site-packages/networkx/readwrite/json_graph/node_link.py:287: FutureWarning: \nThe default value will be changed to `edges=\"edges\" in NetworkX 3.6.\n\nTo make this warning go away, explicitly set the edges kwarg, e.g.:\n\n  nx.node_link_graph(data, edges=\"links\") to preserve current behavior, or\n  nx.node_link_graph(data, edges=\"edges\") for forward compatibility.\n  warnings.warn(\n</code>\n</pre> <pre>\n<code>Getting initial graph:   0%|          | 0/309 [00:00&lt;?, ?it/s]</code>\n</pre> <p>The simplest thing we can do now is to replay the edits in order. <code>paleo</code> provides the <code>apply_edit</code> function that takes in the graph and an edit and applies it to the graph. Note that this modifies the graph in place.</p> <pre><code>from paleo import apply_edit\n\ndeltas = list(networkdeltas.values())\n\ngraph = initial_graph.copy()\nfor delta in tqdm(deltas, disable=False):\n    apply_edit(graph, delta)\n</code></pre> <pre>\n<code>  0%|          | 0/693 [00:00&lt;?, ?it/s]</code>\n</pre> <p>As a sanity check, we might want to compare the graph that we got from replaying edits from the original, to the actual graph that we'd get from <code>client.chunkedgraph.level2_chunk_graph</code>.</p> <p>To do so, we need to also know a point on the object of interest to use as an anchor point - this is because typically <code>graph</code> will be composed of many connected components, but only one of them corresponds to the current state of our neuron.</p> <pre><code>from paleo import get_nucleus_supervoxel\n\nnuc_supervoxel_id = get_nucleus_supervoxel(root_id, client)\n\nnuc_level2_id = client.chunkedgraph.get_roots(nuc_supervoxel_id, stop_layer=2)[0]\n\nneuron_component = nx.node_connected_component(graph, nuc_level2_id)\nneuron_graph = graph.subgraph(neuron_component)\n</code></pre> <pre><code>computed_edgelist = nx.to_pandas_edgelist(neuron_graph).values.astype(int)\n</code></pre> <pre><code>final_edgelist = client.chunkedgraph.level2_chunk_graph(root_id)\n</code></pre> <p>It's assuring to see that we at least have the same number of edges in both cases.</p> <pre><code>len(final_edgelist), len(computed_edgelist)\n</code></pre> <pre>\n<code>(10210, 10210)</code>\n</pre> <p>...and when we compare the actual edgelists element-wise, we see that they are the same.</p> <pre><code>import numpy as np\n\nfinal_edgelist = np.unique(np.sort(final_edgelist, axis=1), axis=0)\ncomputed_edgelist = np.unique(np.sort(computed_edgelist, axis=1), axis=0)\n\n(final_edgelist == computed_edgelist).all()\n</code></pre> <pre>\n<code>True</code>\n</pre> <p>Now, let's try keeping track of the state of the neuron at every point along this edit history.</p> <p>This becomes just a bit more complicated: often the level2 ID corresponding to a nucleus's location may change over time if there was an edit near that location. If we want to keep track of the segmentation component corresponding to the nucleus (or some other point) over this whole history, then we need to know how this ID changes over time. <code>paleo</code> provides the <code>get_node_aliases</code> function to help with this.</p> <pre><code>from paleo import get_node_aliases\n\nnode_info = get_node_aliases(nuc_supervoxel_id, client, stop_layer=2)\nnode_info\n</code></pre> start_valid_ts end_valid_ts node_id 161513998385152439 2020-08-01 13:07:22.739000+00:00 2024-06-05 10:10:01.203215+00:00 161513998385152001 2020-05-29 13:26:43.761000+00:00 2020-08-01 13:07:22.738999+00:00 <p>Now we have all the ingredients to replay the edits and keep track of the neuron's state.</p> <pre><code>def find_level2_node(graph, level2_ids):\n    for level2_id in level2_ids:\n        if graph.has_node(level2_id):\n            return level2_id\n    return None\n\n\n# keep track of components that are reached as we go\ncomponents = []\n\n# store the initial state\nnucleus_node_id = find_level2_node(graph, node_info.index)\ncomponent = nx.node_connected_component(graph, nucleus_node_id)\ncomponents.append(component)\n\n# after each edit, apply it and store the connected component for the nucleus node\nfor delta in tqdm(deltas, disable=False):\n    apply_edit(graph, delta)\n    nucleus_node_id = find_level2_node(graph, node_info.index)\n    component = nx.node_connected_component(graph, nucleus_node_id)\n    components.append(component)\n</code></pre> <pre>\n<code>  0%|          | 0/693 [00:00&lt;?, ?it/s]</code>\n</pre> <pre><code>from paleo import get_component_masks\n\nl2_masks = get_component_masks(components)\nl2_masks\n</code></pre> 0 1 2 3 4 5 6 7 8 9 ... 684 685 686 687 688 689 690 691 692 693 150388177863966928 True True True True True True True True True True ... True True True True True True True True True True 150458546608144530 True True True True True True True True True True ... True True True True True True True True True True 150528846632845407 True True True True True True True True True True ... True True True True True True True True True True 150528846632845424 True True True True True True True True True True ... True True True True True True True True True True 150528915352323074 True True True True True True True True True True ... True True True True True True True True True True ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 181993776573580123 True True True True True True True True True True ... True True True True True True True True True True 181993845293056671 True True True True True True True True True True ... True True True True True True True True True True 181993845293057025 True True True True True True True True True True ... True True True True True True True True True True 182064145317757549 True True True True True True True True True True ... True True True True True True True True True True 182064214037234457 True True True True True True True True True True ... True True True True True True True True True True <p>15544 rows \u00d7 694 columns</p> <pre><code>from paleo import resolve_edit\n\n# keep track of components that are reached as we go\ncomponents = []\n# remember to include the initial state\nnetworkdeltas = {-1: None, **networkdeltas}\n\n# after each edit, apply it and store the connected component for the nucleus node\nfor edit_id, delta in tqdm(networkdeltas.items(), disable=False):\n    component = resolve_edit(graph, delta, node_info.index)\n    components.append(component)\n</code></pre> <pre>\n<code>  0%|          | 0/694 [00:00&lt;?, ?it/s]</code>\n</pre> <p>The above syntax is helpful if you want to have some control over what happens at each stage of the process, or if you want to keep track of particular information at each stage. If you just want the level2 nodes or level2 graph at each stage, you can use the <code>apply_edit_sequence</code> function, which is a wrapper around this <code>resolve_edit</code> loop.</p> <p>This method returns a dictionary mapping the edit ID to the state of the neuron after applying that edit. By default, this function will include the level2 nodes at each state of the neuron's history.</p> <pre><code>from paleo import apply_edit_sequence\n\nnodes_by_state = apply_edit_sequence(graph, networkdeltas, node_info.index)\n\nlen(nodes_by_state[9028])\n</code></pre> <pre>\n<code>  0%|          | 0/694 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>8962</code>\n</pre> <p>If you need to keep the actual connectivity of the level2 graph at each stage, then instead pass in <code>return_graph=True</code>. This will return a dictionary mapping the edit ID to the level2 graph at that stage. This version is a bit slower since it makes a copy of the graph at each edit.</p> <pre><code>from paleo import apply_edit_sequence\n\ngraphs_by_state = apply_edit_sequence(\n    graph, networkdeltas, node_info.index, return_graphs=True\n)\n\ngraphs_by_state[9028]\n</code></pre> <pre>\n<code>  0%|          | 0/694 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>&lt;networkx.classes.graph.Graph at 0x3b5cc6ae0&gt;</code>\n</pre>"},{"location":"tutorials/replay/#extract-the-edits-and-initial-state-of-this-neuron","title":"Extract the edits and initial state of this neuron","text":""},{"location":"tutorials/replay/#replaying-the-edits-over-the-level2-graph","title":"Replaying the edits over the level2 graph","text":""},{"location":"tutorials/replay/#tracking-neuron-state-over-the-edit-history","title":"Tracking neuron state over the edit history","text":""},{"location":"tutorials/replay/#simplifying-the-process","title":"Simplifying the process","text":"<p>The <code>resolve_edit</code> function simplifies some of this boilerplate code by taking in the graph, the edit, and a list of nodes to check to \"anchor\" the edit. In our case, this was the level2 IDs corresponding to the nucleus point. It also simplifies the code if we add an element to our <code>deltas</code> dictionary mapping <code>-1</code> to <code>None</code>, which denotes the original state of the neuron before any edits were applied.</p>"},{"location":"tutorials/skeletons/","title":"Skeletonizing","text":"<pre><code>from caveclient import CAVEclient\nfrom paleo import (\n    get_initial_graph,\n    get_root_level2_edits,\n    get_nucleus_supervoxel,\n    get_node_aliases,\n)\n</code></pre> <pre><code>root_id = 864691135639556411\nclient = CAVEclient(\"minnie65_public\", version=1078)\n</code></pre> <pre><code>edits = get_root_level2_edits(root_id, client)\ninitial_graph = get_initial_graph(root_id, client)\nnuc_supervoxel_id = get_nucleus_supervoxel(root_id, client)\nanchor_nodes = get_node_aliases(nuc_supervoxel_id, client, stop_layer=2)\n</code></pre> <pre>\n<code>Extracting level2 edits:   0%|          | 0/693 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>Getting initial graph:   0%|          | 0/309 [00:00&lt;?, ?it/s]</code>\n</pre> <pre><code>from paleo import apply_edit_sequence\n\ngraphs_by_state = apply_edit_sequence(\n    initial_graph,\n    edits,\n    anchor_nodes,\n    return_graphs=True,\n    include_initial=True,\n    verbose=True,\n)\ngraphs_by_state[9028]\n</code></pre> <pre>\n<code>  0%|          | 0/694 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>&lt;networkx.classes.graph.Graph at 0x2db3636b0&gt;</code>\n</pre> <pre><code>from paleo import skeletonize_sequence\n\nskeletons_by_state = skeletonize_sequence(\n    graphs_by_state, root_id=root_id, client=client\n)\nskeletons_by_state[9028]\n</code></pre> <pre>\n<code>  0%|          | 0/694 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 37/37 [00:00&lt;00:00, 83750.27it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 37/37 [00:00&lt;00:00, 74934.45it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 37/37 [00:00&lt;00:00, 154879.49it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 37/37 [00:00&lt;00:00, 102232.71it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 37/37 [00:00&lt;00:00, 123755.38it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 37/37 [00:00&lt;00:00, 125863.14it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 37/37 [00:00&lt;00:00, 114530.81it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 37/37 [00:00&lt;00:00, 129001.87it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 37/37 [00:00&lt;00:00, 130630.68it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 37/37 [00:00&lt;00:00, 71680.95it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 37/37 [00:00&lt;00:00, 107845.20it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 37/37 [00:00&lt;00:00, 116072.74it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 159763.01it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199271.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 200464.20it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 184456.41it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 164322.28it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211901.92it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 183993.56it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206876.71it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206164.04it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213547.61it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211488.96it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203524.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208621.30it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208018.78it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210474.45it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 195951.63it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 223806.17it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208517.07it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199579.39it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211291.31it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208452.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203234.83it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 201598.78it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213926.48it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209599.09it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207984.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 193278.33it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205976.21it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 222126.47it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199178.89it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209918.03it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210259.68it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210899.85it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213477.60it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 200422.24it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 217985.86it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 192376.07it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203983.58it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204165.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 202617.58it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204889.91it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211552.18it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207684.38it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206532.86it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 212136.65it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208870.25it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209769.25it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209850.38it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210569.74it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 215683.88it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204229.27it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207382.75it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 101214.93it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 170453.03it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213875.89it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213158.92it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206569.55it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211497.20it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 212482.79it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199885.73it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 218240.12it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209039.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 216694.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205573.02it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 196745.03it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210913.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 183462.69it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 198719.33it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 201192.64it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207076.72it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 198993.84it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208322.27it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210091.43it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208948.00it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199435.12it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210088.72it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207771.86it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209874.73it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 202673.08it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203963.13it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203387.19it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208980.19it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211709.01it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211110.45it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208287.62it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 217959.59it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 219888.07it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204640.06it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210537.06it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208276.96it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210042.63it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205744.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209197.73it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210787.88it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 201244.87it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 217837.08it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209977.60it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205747.11it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 200912.03it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207504.35it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 195220.77it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211050.24it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 200743.55it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210820.64it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204941.50it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 217511.07it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210891.65it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 202239.98it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209170.85it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204575.77it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199425.35it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213418.82it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210216.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206559.07it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 217840.00it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 193574.82it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 190737.31it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206553.82it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204985.38it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208709.57it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 212322.04it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 197068.97it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 214464.81it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206404.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210727.84it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210648.76it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206137.93it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 219888.07it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 195150.56it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 200124.09it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203537.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 202761.44it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208811.30it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203077.63it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205692.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204681.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211233.73it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209853.08it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207774.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 222433.03it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211176.18it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210613.33it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206425.48it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203963.13it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205440.70it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213640.10it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204586.05it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 215955.71it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 222777.02it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 223455.93it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206987.19it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 221899.37it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204727.57it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207840.83it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199474.22it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209431.89it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204975.05it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206653.47it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204188.28it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206569.55it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213136.59it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 190507.38it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 198172.58it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209712.50it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199105.80it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204360.03it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207430.31it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213371.27it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207573.15it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211835.74it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 198843.13it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213923.67it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208993.60it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213184.04it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209510.06it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209036.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 63807.14it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 163380.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 214776.08it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211403.82it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 202991.53it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209240.76it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206077.91it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199804.76it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210806.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211604.43it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210545.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203608.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208712.24it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209763.84it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203394.81it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 198336.77it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199300.82it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210275.97it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203095.37it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208119.85it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205911.07it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207997.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 214467.64it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199486.44it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 214526.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210856.14it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 198792.13it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204195.96it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206404.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207287.67it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209173.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208934.59it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 220471.79it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 215778.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199794.95it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199797.40it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210910.78it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210888.92it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206929.31it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 200392.63it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210180.94it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 212843.97it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 216225.36it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203448.20it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204781.66it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 214631.65it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205963.18it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 167284.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 201026.17it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209634.18it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 200961.64it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199518.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209410.34it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207830.22it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208610.60it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 198811.56it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210785.15it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 52568.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 50343.27it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 194186.76it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211359.90it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 201190.15it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 214526.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211648.45it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203628.89it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209590.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206945.09it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208364.94it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 198996.27it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207917.82it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204544.92it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209299.94it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 220313.64it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208522.42it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208487.70it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 212599.34it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 199782.69it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 190639.02it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204047.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205321.50it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 197095.22it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 200496.30it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209690.89it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 138346.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210809.72it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207949.69it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205031.85it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206012.70it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208151.78it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 212821.71it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203448.20it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 212089.66it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208824.70it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 212238.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207132.05it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213147.75it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 217264.31it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206766.34it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208431.63it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211395.58it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 212785.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208308.94it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 196775.95it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207973.60it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 214798.75it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205931.91it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209082.19it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 216233.98it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 214691.10it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 196507.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 197274.36it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 203140.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205495.16it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 208420.96it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211058.45it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 163694.35it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 209216.55it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 205137.79it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 210949.04it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 213500.00it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 207639.34it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 206811.00it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 217104.94it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 204606.62it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3881/3881 [00:00&lt;00:00, 211464.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4059/4059 [00:00&lt;00:00, 213269.69it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4066/4066 [00:00&lt;00:00, 214419.13it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4056/4056 [00:00&lt;00:00, 201789.87it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4056/4056 [00:00&lt;00:00, 207469.66it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4056/4056 [00:00&lt;00:00, 207946.42it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5413/5413 [00:00&lt;00:00, 110872.32it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5364/5364 [00:00&lt;00:00, 109565.83it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6728/6728 [00:00&lt;00:00, 79807.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6204/6204 [00:00&lt;00:00, 82608.86it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6187/6187 [00:00&lt;00:00, 78779.36it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6226/6226 [00:00&lt;00:00, 82502.12it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6226/6226 [00:00&lt;00:00, 83679.64it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6226/6226 [00:00&lt;00:00, 87212.66it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6226/6226 [00:00&lt;00:00, 82956.85it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6226/6226 [00:00&lt;00:00, 88377.34it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6226/6226 [00:00&lt;00:00, 84292.24it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6226/6226 [00:00&lt;00:00, 84234.33it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6226/6226 [00:00&lt;00:00, 84136.08it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6210/6210 [00:00&lt;00:00, 84543.64it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6208/6208 [00:00&lt;00:00, 89323.78it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6201/6201 [00:00&lt;00:00, 84445.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6196/6196 [00:00&lt;00:00, 86605.28it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6192/6192 [00:00&lt;00:00, 83457.20it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6179/6179 [00:00&lt;00:00, 47729.34it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6177/6177 [00:00&lt;00:00, 84435.86it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6170/6170 [00:00&lt;00:00, 85595.49it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6105/6105 [00:00&lt;00:00, 92270.70it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5645/5645 [00:00&lt;00:00, 104590.80it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5627/5627 [00:00&lt;00:00, 113943.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5557/5557 [00:00&lt;00:00, 89643.80it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5526/5526 [00:00&lt;00:00, 112561.31it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5518/5518 [00:00&lt;00:00, 115126.22it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5187/5187 [00:00&lt;00:00, 136091.47it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5182/5182 [00:00&lt;00:00, 129923.39it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 145434.38it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 135991.72it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 140419.63it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 143769.16it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 138788.53it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 142478.39it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 139155.04it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 134683.19it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 139307.74it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 135083.77it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 108365.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 139271.09it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 140336.12it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 142075.58it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 138045.45it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 139518.12it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 138525.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 141138.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 139537.85it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 138392.17it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 136372.71it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 141184.89it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 134928.45it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 141998.45it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 110341.64it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 139218.40it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 140951.14it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 141042.71it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 127487.49it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 139173.78it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 141089.46it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 138451.30it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 136930.95it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 142244.08it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 143674.01it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 141940.89it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 138599.80it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 140961.21it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5176/5176 [00:00&lt;00:00, 143725.37it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 140434.04it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 139389.53it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 142442.06it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 139517.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 139939.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 140434.95it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 142020.31it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 46413.07it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 140865.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 131520.05it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 137770.47it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 133979.91it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 135018.27it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 140274.83it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 141183.35it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5192/5192 [00:00&lt;00:00, 136183.47it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 115080.88it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 119230.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 111326.15it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 114230.72it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 113252.75it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 114897.34it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 113253.25it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 117580.77it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 116034.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 114082.20it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 116146.11it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 110938.00it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 114668.22it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 112941.53it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 113416.86it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 113993.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 115763.30it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 114766.30it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 113000.92it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6046/6046 [00:00&lt;00:00, 114683.78it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6287/6287 [00:00&lt;00:00, 106398.92it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6285/6285 [00:00&lt;00:00, 110805.58it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6285/6285 [00:00&lt;00:00, 110180.35it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6285/6285 [00:00&lt;00:00, 107638.04it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6285/6285 [00:00&lt;00:00, 106262.60it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6285/6285 [00:00&lt;00:00, 108231.55it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6285/6285 [00:00&lt;00:00, 107863.53it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6285/6285 [00:00&lt;00:00, 107144.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6285/6285 [00:00&lt;00:00, 104312.39it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6328/6328 [00:00&lt;00:00, 108451.07it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6328/6328 [00:00&lt;00:00, 107896.45it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6328/6328 [00:00&lt;00:00, 29056.29it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6328/6328 [00:00&lt;00:00, 107999.19it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6328/6328 [00:00&lt;00:00, 106943.06it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6328/6328 [00:00&lt;00:00, 106692.00it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6328/6328 [00:00&lt;00:00, 107249.01it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6328/6328 [00:00&lt;00:00, 104880.80it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 96312.26it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 103809.30it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 100223.73it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 97884.04it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 96692.03it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 96020.12it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 93057.72it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 70594.53it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 94935.67it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 100679.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 103087.03it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 102989.85it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 104888.55it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 100676.48it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 87406.84it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 90673.08it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 88106.02it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 99756.74it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 102031.07it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 21329.80it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 104821.31it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 100570.88it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 104517.57it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 103876.86it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 86184.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 104490.53it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 104809.36it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 103452.73it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 104825.02it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 103807.68it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 102006.47it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 106116.22it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 102586.33it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 102282.43it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 97184.89it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6355/6355 [00:00&lt;00:00, 100418.56it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6975/6975 [00:00&lt;00:00, 81699.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6978/6978 [00:00&lt;00:00, 77264.66it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 85798.70it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 88373.76it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 85693.24it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 84859.76it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 85114.33it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 42166.53it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 78576.72it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 83994.13it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 88107.04it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 85850.27it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 85439.44it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 86256.69it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 89841.82it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 87548.02it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 88426.34it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 89750.66it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 89791.40it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 90937.55it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 86049.33it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 90718.63it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 85236.98it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 83634.02it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 86631.33it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 80052.59it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6981/6981 [00:00&lt;00:00, 90349.13it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6994/6994 [00:00&lt;00:00, 75723.65it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6994/6994 [00:00&lt;00:00, 86051.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6994/6994 [00:00&lt;00:00, 84519.55it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 84263.70it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 82308.58it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 84463.13it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 85492.80it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 84219.35it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 82412.96it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 24665.59it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 85777.14it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 85123.83it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 86791.69it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 88463.33it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 86707.75it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 89138.95it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 89252.29it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 77531.67it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 63847.39it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 85344.98it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 85154.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 81704.83it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 88793.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 83696.89it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 85805.09it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 87005.58it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 85039.19it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 81141.72it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 84577.62it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 83363.53it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 73233.21it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 80248.00it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 81774.64it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 59659.32it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 87745.86it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 84603.11it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 85787.28it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 88153.63it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 82878.83it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 86976.85it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 87974.10it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7096/7096 [00:00&lt;00:00, 86825.62it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 73106.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 76998.06it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 76608.57it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 76750.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 67536.19it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 76916.24it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 78126.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 72302.73it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77494.18it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 76768.14it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 76748.89it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 73619.17it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 74519.33it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77433.68it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77322.82it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77343.85it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 78335.33it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 73710.69it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77785.29it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77668.73it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 75955.29it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 78426.14it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77193.37it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 78187.63it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 78107.06it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77339.94it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77674.17it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 78978.14it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77915.03it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 78994.64it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 76810.53it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 74182.35it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77570.12it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 78317.20it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77769.29it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77765.33it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 65832.02it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 73520.31it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77736.18it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 77816.17it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 53167.29it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 54515.93it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 59468.13it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7662/7662 [00:00&lt;00:00, 56431.16it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 59779.79it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 65024.15it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 75104.97it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 70582.04it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 69922.75it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 71680.31it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 69311.84it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 73887.29it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 70784.73it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 69896.67it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 71345.35it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 63610.86it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 73914.29it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 74697.28it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 64157.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7910/7910 [00:00&lt;00:00, 74206.74it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8219/8219 [00:00&lt;00:00, 65959.71it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8219/8219 [00:00&lt;00:00, 69065.59it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8219/8219 [00:00&lt;00:00, 69649.01it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8220/8220 [00:00&lt;00:00, 71288.49it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8220/8220 [00:00&lt;00:00, 69320.37it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8220/8220 [00:00&lt;00:00, 70109.62it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8220/8220 [00:00&lt;00:00, 46662.10it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8220/8220 [00:00&lt;00:00, 70647.79it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8220/8220 [00:00&lt;00:00, 69543.81it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8254/8254 [00:00&lt;00:00, 68357.22it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8254/8254 [00:00&lt;00:00, 57517.22it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8254/8254 [00:00&lt;00:00, 37128.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8254/8254 [00:00&lt;00:00, 57919.16it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8254/8254 [00:00&lt;00:00, 67552.78it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8254/8254 [00:00&lt;00:00, 69042.66it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8254/8254 [00:00&lt;00:00, 69052.03it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8254/8254 [00:00&lt;00:00, 63213.78it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8254/8254 [00:00&lt;00:00, 64861.30it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8254/8254 [00:00&lt;00:00, 68180.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8254/8254 [00:00&lt;00:00, 69690.47it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8254/8254 [00:00&lt;00:00, 69132.42it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8478/8478 [00:00&lt;00:00, 61820.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8478/8478 [00:00&lt;00:00, 67363.89it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8478/8478 [00:00&lt;00:00, 66680.75it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8478/8478 [00:00&lt;00:00, 66376.92it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8478/8478 [00:00&lt;00:00, 66896.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8689/8689 [00:00&lt;00:00, 57127.66it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8689/8689 [00:00&lt;00:00, 64465.09it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8689/8689 [00:00&lt;00:00, 63431.27it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8689/8689 [00:00&lt;00:00, 62681.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8689/8689 [00:00&lt;00:00, 61360.87it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8689/8689 [00:00&lt;00:00, 63553.27it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8689/8689 [00:00&lt;00:00, 22502.89it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8689/8689 [00:00&lt;00:00, 64994.74it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8694/8694 [00:00&lt;00:00, 62436.38it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8703/8703 [00:00&lt;00:00, 59462.13it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8742/8742 [00:00&lt;00:00, 63831.29it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8742/8742 [00:00&lt;00:00, 63912.40it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8742/8742 [00:00&lt;00:00, 64445.30it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8742/8742 [00:00&lt;00:00, 63673.00it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8848/8848 [00:00&lt;00:00, 62722.91it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8833/8833 [00:00&lt;00:00, 63139.91it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8833/8833 [00:00&lt;00:00, 62769.66it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8833/8833 [00:00&lt;00:00, 61412.75it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8833/8833 [00:00&lt;00:00, 61589.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8854/8854 [00:00&lt;00:00, 58228.10it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8854/8854 [00:00&lt;00:00, 62897.37it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8854/8854 [00:00&lt;00:00, 61788.19it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8854/8854 [00:00&lt;00:00, 62883.84it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8854/8854 [00:00&lt;00:00, 62019.64it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8854/8854 [00:00&lt;00:00, 63337.41it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8854/8854 [00:00&lt;00:00, 59034.98it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8854/8854 [00:00&lt;00:00, 61416.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8997/8997 [00:00&lt;00:00, 61420.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8997/8997 [00:00&lt;00:00, 46832.76it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8997/8997 [00:00&lt;00:00, 56737.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8997/8997 [00:00&lt;00:00, 59202.14it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8997/8997 [00:00&lt;00:00, 58178.06it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8997/8997 [00:00&lt;00:00, 62927.99it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8997/8997 [00:00&lt;00:00, 61543.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8997/8997 [00:00&lt;00:00, 61696.37it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8997/8997 [00:00&lt;00:00, 62968.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8997/8997 [00:00&lt;00:00, 63257.95it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8997/8997 [00:00&lt;00:00, 59221.18it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8997/8997 [00:00&lt;00:00, 63134.66it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9013/9013 [00:00&lt;00:00, 62088.39it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4011/4011 [00:00&lt;00:00, 222693.14it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4009/4009 [00:00&lt;00:00, 229321.03it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4008/4008 [00:00&lt;00:00, 237762.65it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4007/4007 [00:00&lt;00:00, 220203.30it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4006/4006 [00:00&lt;00:00, 228221.91it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4002/4002 [00:00&lt;00:00, 229949.24it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4000/4000 [00:00&lt;00:00, 208531.78it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3996/3996 [00:00&lt;00:00, 222074.93it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3994/3994 [00:00&lt;00:00, 224760.18it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3992/3992 [00:00&lt;00:00, 229242.75it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3989/3989 [00:00&lt;00:00, 222991.85it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3988/3988 [00:00&lt;00:00, 228250.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3984/3984 [00:00&lt;00:00, 228545.54it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3982/3982 [00:00&lt;00:00, 224452.28it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3979/3979 [00:00&lt;00:00, 28235.70it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3975/3975 [00:00&lt;00:00, 167756.97it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3972/3972 [00:00&lt;00:00, 229793.18it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3970/3970 [00:00&lt;00:00, 221454.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3969/3969 [00:00&lt;00:00, 217488.11it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3967/3967 [00:00&lt;00:00, 217620.18it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3962/3962 [00:00&lt;00:00, 216347.04it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3960/3960 [00:00&lt;00:00, 216963.76it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3959/3959 [00:00&lt;00:00, 225146.77it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8961/8961 [00:00&lt;00:00, 55987.03it/s]\n</code>\n</pre> <pre>\n<code>&lt;meshparty.skeleton.Skeleton at 0x2f2640230&gt;</code>\n</pre> <pre><code>import pandas as pd \n\nskeleton_info = []\nfor i, (operation_id, skeleton) in enumerate(skeletons_by_state.items()):\n    skeleton_info.append(\n        {\n            \"state\": i,\n            \"operation_id\": operation_id,\n            \"n_vertices\": len(skeleton.vertices),\n            \"n_edges\": len(skeleton.edges),\n            \"path_length\": skeleton.path_length(),\n            \"n_branch_points\": len(skeleton.branch_points),\n            \"n_end_points\": len(skeleton.end_points),\n        }\n    )\n\nskeleton_info = pd.DataFrame(skeleton_info)\n</code></pre> <pre><code>import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_context(\"talk\")\nfig, axs = plt.subplots(1, 3, figsize=(15, 5), layout=\"constrained\")\nfor i, feature in enumerate([\"path_length\", \"n_branch_points\", \"n_end_points\"]):\n    sns.lineplot(data=skeleton_info, x=\"state\", y=feature, ax=axs[i])\n    axs[i].set_ylabel(feature.capitalize().replace(\"_\", \" \"))\n    axs[i].set_xlabel(\"State\")\n</code></pre>"},{"location":"tutorials/skeletons/#creating-skeletons","title":"Creating skeletons","text":"<p>Note</p> <p>This notebook requires <code>pcg_skel</code> to be installed. You can install it with <code>pip install pcg_skel</code> or upon installing <code>paleo</code> with <code>pip install paleo[skeleton]</code>.</p>"},{"location":"tutorials/skeletons/#collect-edit-history-information","title":"Collect edit history information","text":""},{"location":"tutorials/skeletons/#apply-edit-history","title":"Apply edit history","text":""},{"location":"tutorials/skeletons/#skeletonize-states","title":"Skeletonize states","text":""},{"location":"tutorials/strategies/","title":"Replay strategies","text":"<pre><code>import networkx as nx\nfrom tqdm.auto import tqdm\n\nfrom caveclient import CAVEclient\nfrom paleo import (\n    get_initial_graph,\n    get_operations_level2_edits,\n    get_nucleus_supervoxel,\n    get_node_aliases,\n    get_detailed_change_log,\n)\n</code></pre> <pre><code>root_id = 864691135639556411\nclient = CAVEclient(\"minnie65_public\", version=1078)\nchange_log = get_detailed_change_log(root_id, client, filtered=False)\nchange_log\n</code></pre> <pre><code>networkdeltas = get_operations_level2_edits(change_log.index, client)\ninitial_graph = get_initial_graph(root_id, client)\nnuc_supervoxel_id = get_nucleus_supervoxel(root_id, client)\nnode_info = get_node_aliases(nuc_supervoxel_id, client, stop_layer=2)\nanchor_nodes = node_info.index\n</code></pre> <pre><code>from paleo import get_metaedits\n\nmetaedits, operation_map = get_metaedits(networkdeltas)\n</code></pre> <pre><code>change_log[\"metaedit\"] = change_log.index.map(operation_map)\n\nmetaedit_info = (\n    change_log.groupby(\"metaedit\")\n    .agg({\"timestamp\": \"min\", \"is_merge\": \"any\", \"metaedit\": \"count\"})\n    .rename(\n        columns={\n            \"metaedit\": \"n_edits\",\n            \"timestamp\": \"first_timestamp\",\n            \"is_merge\": \"has_merge\",\n        }\n    )\n)\nmetaedit_info[\"operation_ids\"] = (\n    change_log.reset_index().groupby(\"metaedit\")[\"operation_id\"].unique()\n)\nmetaedit_info = metaedit_info.sort_values(\"first_timestamp\")\nmetaedit_info\n</code></pre> <pre><code>metaedit_info.index.is_monotonic_increasing\n</code></pre> <pre><code>from paleo import resolve_edit\n\ngraph = initial_graph.copy()\n\ncomponents = []\nsubgraphs = []\n\n# remember to include the initial state\nedits = metaedits.copy()\nedits = {-1: None, **edits}\n\n# after each edit, apply it and store the connected component for the nucleus node\nfor edit_id, delta in tqdm(edits.items(), disable=False):\n    component = resolve_edit(graph, delta, node_info.index)\n    components.append(component)\n\n    subgraph = graph.subgraph(component).copy()\n    subgraphs.append(subgraph)\n</code></pre> <pre><code>final_edgelist = client.chunkedgraph.level2_chunk_graph(root_id)\nfinal_graph = nx.from_edgelist(final_edgelist)\n</code></pre> <pre><code>import numpy as np\n\nprint(np.setdiff1d(final_graph.nodes, subgraphs[-1].nodes))\n</code></pre> <pre><code>used_l2_ids = np.unique(np.concatenate([list(c) for c in components]))\n\nl2data = client.l2cache.get_l2data_table(used_l2_ids, split_columns=True)\nl2data\n</code></pre> <pre><code>import pandas as pd\n\nfrom pcg_skel import pcg_skeleton_direct\n\nnuc_table = client.info.get_datastack_info()[\"soma_table\"]\nnuc_info = client.materialize.query_table(\n    nuc_table, filter_equal_dict=dict(pt_root_id=root_id)\n)\nnuc_loc = nuc_info[\"pt_position\"].values[0]\n\n\ndef skeletonize(subgraph):\n    component = pd.Index(list(subgraph.nodes))\n    vertices = l2data.loc[\n        component, [\"rep_coord_nm_x\", \"rep_coord_nm_y\", \"rep_coord_nm_z\"]\n    ].values\n    edges = nx.to_pandas_edgelist(subgraph).values\n    edges = np.vectorize(component.get_loc)(edges)\n    skeleton = pcg_skeleton_direct(vertices, edges, root_point=nuc_loc)\n    return skeleton\n\n\nskeletons = {}\nfor subgraph in tqdm(subgraphs, desc=\"Skeletonizing\"):\n    skeleton = skeletonize(subgraph)\n    skeletons[subgraph] = skeleton\n\n\n# graph = initial_graph.copy()\n# # keep track of components that are reached as we go\n# components = []\n# # remember to include the initial state\n# metaedits = {-1: None, **metaedits}\n\n# skeletons = {}\n# # after each edit, apply it and store the connected component for the nucleus node\n# for edit_id, delta in tqdm(metaedits.items(), disable=False):\n#     component = resolve_edit(graph, delta, node_info.index)\n#     skeleton = skeletonize(graph, component)\n#     skeletons[edit_id] = skeleton\n</code></pre> <pre><code>import pyvista as pv\n\nplotter = pv.Plotter()\nplotter.open_gif(\"skeleton_evolution.gif\", fps=30)\n\n\ndef skel_to_poly(skeleton):\n    vertices = skeleton.vertices\n    edges = skeleton.edges\n    lines = np.full((len(edges), 3), 2)\n    lines[:, 1:] = edges\n    line_poly = pv.PolyData(vertices, lines=lines)\n    return line_poly\n\n\nlast_skeleton = skeletons[list(skeletons.keys())[-1]]\nactor = plotter.add_mesh(skel_to_poly(last_skeleton), color=\"black\", line_width=2)\nplotter.write_frame()\nplotter.remove_actor(actor)\n\nfirst_skeleton = skeletons[list(skeletons.keys())[0]]\nactor = plotter.add_mesh(skel_to_poly(first_skeleton), color=\"blue\", line_width=5)\n\nfor edit_id, skeleton in skeletons.items():\n    line_poly = skel_to_poly(skeleton)\n    actor = plotter.add_mesh(line_poly, color=\"black\", line_width=2)\n    plotter.write_frame()\n    plotter.remove_actor(actor)\n\nplotter.close()\n</code></pre> <pre><code>import time\nfrom pcg_skel import pcg_skeleton\n\ncurrtime = time.time()\nscratch_skeleton = pcg_skeleton(\n    root_id,\n    client,\n    root_point=nuc_loc,\n    root_point_resolution=[1, 1, 1],\n)\n</code></pre> <pre><code>from paleo import get_all_time_synapses\n\npre_synapses, post_synapses = get_all_time_synapses(root_id, client, verbose=True)\n</code></pre> <pre><code>from paleo import get_nodes_aliases\n\nsupervoxel_ids = pre_synapses[\"pre_pt_supervoxel_id\"].unique()\nprint(len(supervoxel_ids))\npre_l2_mappings = get_nodes_aliases(supervoxel_ids, client)\n\nsupervoxel_ids = post_synapses[\"post_pt_supervoxel_id\"].unique()\nprint(len(supervoxel_ids))\n# post_l2_mappings = get_nodes_aliases(supervoxel_ids, client)\n</code></pre>"},{"location":"tutorials/strategies/#replay-strategies","title":"Replay strategies","text":""},{"location":"tutorials/synapses/","title":"Tracking synapses","text":"<pre><code>import time\n\nfrom caveclient import CAVEclient\nfrom paleo import (\n    get_initial_graph,\n    get_root_level2_edits,\n    get_nucleus_supervoxel,\n    get_node_aliases,\n)\n</code></pre> <pre>\n<code>WARNING:root:cloudvolume not available. 'precomputed' output format will not work.\n</code>\n</pre> <pre><code>root_id = 864691135639556411\nclient = CAVEclient(\"minnie65_public\", version=1078)\n</code></pre> <pre><code>edits = get_root_level2_edits(root_id, client)\ninitial_graph = get_initial_graph(root_id, client)\nnuc_supervoxel_id = get_nucleus_supervoxel(root_id, client)\nanchor_nodes = get_node_aliases(nuc_supervoxel_id, client, stop_layer=2)\n</code></pre> <pre>\n<code>Extracting level2 edits:   0%|          | 0/693 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>WARNING:root:cloudvolume not available. 'precomputed' output format will not work.\nWARNING:root:cloudvolume not available. 'precomputed' output format will not work.\nWARNING:root:cloudvolume not available. 'precomputed' output format will not work.\nWARNING:root:cloudvolume not available. 'precomputed' output format will not work.\nWARNING:root:cloudvolume not available. 'precomputed' output format will not work.\nWARNING:root:cloudvolume not available. 'precomputed' output format will not work.\nWARNING:root:cloudvolume not available. 'precomputed' output format will not work.\nWARNING:root:cloudvolume not available. 'precomputed' output format will not work.\nWARNING:root:cloudvolume not available. 'precomputed' output format will not work.\nWARNING:root:cloudvolume not available. 'precomputed' output format will not work.\nWARNING:root:cloudvolume not available. 'precomputed' output format will not work.\nWARNING:root:cloudvolume not available. 'precomputed' output format will not work.\n</code>\n</pre> <pre>\n<code>Getting initial graph:   0%|          | 0/309 [00:00&lt;?, ?it/s]</code>\n</pre> <pre><code>from paleo import apply_edit_sequence\n\nnodes_by_state = apply_edit_sequence(\n    initial_graph,\n    edits,\n    anchor_nodes,\n    return_graphs=False,\n    include_initial=True,\n    verbose=True,\n)\nnodes_by_state[9028]\n</code></pre> <pre>\n<code>  0%|          | 0/694 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>{161373192110212021,\n 161373192177319957,\n 161373260829688894,\n 161373260896796674,\n 161373329549165526,\n 161373329616273411,\n 161373398335750279,\n 161443492202020923,\n 161443560854389734,\n 161443560921497602,\n 161443629573866365,\n 161443629640974337,\n 161443698293343195,\n 161443698360451073,\n 161443767079927917,\n 161513860946198532,\n 161513929598567394,\n 161513929665675266,\n 161513929665675274,\n 161513998318044173,\n 161513998385152001,\n 161514067037520900,\n 161514067104628737,\n 161514135824105588,\n 161514135824105609,\n 161584229690376221,\n 161584298342745132,\n 161584298409852931,\n 161584367062221750,\n 161584367129329665,\n 161584435781698483,\n 161584435848806401,\n 161584435848806430,\n 161654598434553982,\n 161654667154030620,\n 161654735806399337,\n 161654735873507331,\n 161654804592984109}</code>\n</pre> <pre><code>from paleo import get_mutable_synapses\n\ncurrtime = time.time()\n\npre_synapses = get_mutable_synapses(root_id, edits, client, verbose=True, sides=\"pre\")\n\nprint(f\"{time.time() - currtime:.3f} seconds elapsed.\")\n</code></pre> <pre>\n<code>Getting original roots took 1.35 seconds\nGetting latest roots took 6.83 seconds\nQuerying synapse table for pre-synapses...\nQuerying synapse table took 33.59 seconds\n</code>\n</pre> <pre>\n<code>Getting leaves:   0%|          | 0/3046 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>Getting remaining level2s:   0%|          | 0/6 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>130.925 seconds elapsed.\n</code>\n</pre> <pre><code>from paleo import map_synapses_to_sequence\n\npre_synapses_by_state = map_synapses_to_sequence(\n    pre_synapses, nodes_by_state, side=\"pre\"\n)\n</code></pre> <pre>\n<code>  0%|          | 0/694 [00:00&lt;?, ?it/s]</code>\n</pre> <pre><code>pre_synapses_by_state[9028]\n</code></pre> <pre>\n<code>[]</code>\n</pre> <pre><code>pre_synapses_by_state[87490]\n</code></pre> <pre>\n<code>[161850858,\n 189432137,\n 185549118,\n 189955131,\n 185551198,\n 189955192,\n 173214806,\n 175121335,\n 175121197,\n 189954862,\n 189954842,\n 161470811,\n 189432488,\n 189432294,\n 189432341,\n 156938288,\n 161469398,\n 189432102,\n 175120892,\n 178846653]</code>\n</pre> <pre><code>n_synapses = [len(s) for s in pre_synapses_by_state.values()]\n</code></pre> <pre><code>import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_context(\"talk\")\n\nfig, ax = plt.subplots()\nsns.lineplot(x=range(len(n_synapses)), y=n_synapses, ax=ax)\nax.set_xlabel(\"State\")\nax.set_ylabel(\"Number of pre-synapses\")\n</code></pre> <pre>\n<code>Text(0, 0.5, 'Number of pre-synapses')</code>\n</pre>"},{"location":"tutorials/synapses/#tracking-synapses","title":"Tracking synapses","text":""},{"location":"tutorials/synapses/#collect-edit-history-information","title":"Collect edit history information","text":""},{"location":"tutorials/synapses/#apply-edit-history","title":"Apply edit history","text":""},{"location":"tutorials/synapses/#get-synapses-map-to-state-history","title":"Get synapses, map to state history","text":""},{"location":"tutorials/synapses/#plot-number-of-synapses-over-time","title":"Plot number of synapses over time","text":""}]}